基本逻辑门：and  or  nand
开关级基本结构模型:pmos  nmos
基本描述方式：行为描述方式、数据流方式、结构化方式
主要数据类型：线网数据类型、寄存器数据类型
用户定义原语：UDP


设计层次：开关级、门级、寄存器传送级（RTL）、算法级

################################################
时延
#n ----------表示延时n个时间单位
`timescale 1ns /100ps  ----------时间单位为1ns，且时间精度为100ps
注：以反引号开始的第一条语句是编译器指令------配置编译器


#############################数据流描述方式
assign #n LHS_net=RHS_expression;

表达式使用的操作数无论何时发生变化，右边表达式都重新计算，并在指定的时延后变化值被赋值给左边的线网变量。
所有的assign并行执行

input
output
wire [3:0] wire1---------指定位宽
reg [3:0] reg1-----------指定位宽

#############################行为描述方式
initial:此语句只执行一次
always ：循环执行
只有寄存器类型的变量能在这两种语句中被赋值。。。


always
@ () begin

***

end
@（）为触发条件，一旦满足触发条件，begin和and 中间的内容顺序执行。。

#############################结构化描述形式
内置门原语：xor x1 (out, in1, in2 ), x2……;
   	   and a1 (out, in1, in2 ), a2……;
	   or  o1 (out, in1, in2 ,in3……), o2;
	   nand

模块调用
可以通过两种方式相关联，一种是采用命名关联，另一种是通过位置关联，第一种是显式关联，可以不按顺序，格式为“.portname(net_name)”；而位置关联就是靠顺序来对应的，因此必须不能打乱顺序。
#############################系统任务调用
$display
$monitor
$time
$readmenb-----------从存储器的左边（最大处）开始填充
$readmenh

##############################编译器指令
`include `resetall `timescale 
`define `undef
`ifdef 	`else `endif
`default_nettype
`unconnected_drive   `nounconnected_drive


值集合
整型---------------简单的十进制格式；基数表示法 [size] 'b/d/o/h value
实数---------------十进制计数法；科学计数法
字符串型-----------

数据类型：
线网类型：-----缺省值为z
寄存器类型:----只能在always和initial语句中被赋值，缺省值为x

###################线网类型:在多驱动源驱动时有差别
1)wire tri:连线与三态线----------有0则零
2）wor trior
3)wand triand
4)trireg:存储数值，类似于寄存器，并且用于电容节点的建模
5)tri0 tri1
6)supply0 supply1-----低电平0和高电平1

向量和标量线网：vectored	scalared

############################寄存器类型
reg   reg [:] reg1,reg2; 	reg [:] mem1[:]-----存储器，不允许对存储器变量值部分进行部分选择或位选择
integer-----------一个integer寄存器默认是是32位（可以改变，但必须大于32位），是一个整体，不能进行位操作。赋值是从右端的位向左边进行，多余的位截断
time--------------至少64位，默认64位
real
realtime

##########################参数
parameter load=4 'd12


##########################操作符
+ - * / %
有符号数存储在：整数寄存器 和 十进制形式的整数中。对于无符号数，'-'代表取补的意思
> < >= <=
== != ===(全等) !==（非全等）-------------------逻辑相等 和 全等的差别体现在x 和 z 上；x==x结果为x； x===x 结果为 1
&&	||	!------------------------------逻辑操作符
～  &  |  ^  ~^  ^~  --------------------------按位操作符
& ～&  |  ~|  ^  ~^  --------------------------归约操作符

######################条件操作符
cond_expr ? expr1 : expr2   ---------------------cond_expr为真时执行expr1,否则执行2

######################连接和复制操作
{expr1,expr2,     };
{3{}};------------------重复三次
